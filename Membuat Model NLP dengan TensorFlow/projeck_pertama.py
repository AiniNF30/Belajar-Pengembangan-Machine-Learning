# -*- coding: utf-8 -*-
"""Projeck Pertama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LfbnlU8MtwtWHHffqdSAqFG6F9grMME

Name : Aini Nurpadilah 
Address : Bekasi
"""

! pip install kaggle

from google.colab import drive
drive.mount('/content/gdrive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/My Drive/Kaggle"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My Drive/Kaggle

!kaggle datasets download -d rajatrc1705/youtube-videos-dataset

!unzip \*.zip

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from keras.models import Sequential, load_model
from keras.layers import Dense, Embedding, LSTM, Bidirectional,Flatten,Dropout
from keras.utils.np_utils import to_categorical
import re

# %load_ext tensorboard

df = pd.read_csv('/content/gdrive/MyDrive/Kaggle/youtube.csv')
df

df['category'].value_counts()

category = pd.get_dummies(df.category)
df_new = pd.concat([df, category], axis=1)
df_new =  df_new.drop(columns='category')

title = df_new['title'].values
label = df_new[['history', 'food', 'art_music', 'travel']].values

title_train, title_test, label_train, label_test = train_test_split(title, label, test_size=0.2)

# Techniques Data
max_words = 2000

tokenizer = Tokenizer(num_words=max_words, oov_token='x')

tokenizer.fit_on_texts(title_train)
sequences_train = tokenizer.texts_to_sequences(title_train)
sequences_test = tokenizer.texts_to_sequences(title_test)

padded_train = pad_sequences(sequences_train) 
padded_test = pad_sequences(sequences_test)

"""Membangun model Sequential dengan Embedding dan LSTM."""

model = tf.keras.Sequential([
                    Embedding(input_dim=5000, output_dim=32),
                    LSTM(64),
                    Dense(256, activation='relu'),
                    Dropout(0.5),
                    Dense(128, activation='relu'),
                    Dropout(0.5),
                    Dense(64, activation='relu'),
                    Dropout(0.5),
                    Dense(4, activation='softmax')
                    ])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir="logs")

"""melatih model dengan memanggil fungsi fit()."""

num_epochs = 30
history = model.fit(padded_train, 
                    label_train, 
                    epochs=num_epochs, 
                    validation_data=(padded_test, label_test), 
                    verbose=2, 
                    callbacks = [tensorboard_callback])

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc=0)

plt.show()

print('Training Accuracy: {}'.format(max(acc)))
print('Validation Accuracy: {}'.format(max(val_acc)))